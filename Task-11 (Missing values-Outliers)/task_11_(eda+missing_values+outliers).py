# -*- coding: utf-8 -*-
"""Task-11 (EDA+Missing Values+Outliers).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10n07e0THPqk0Q4mLFWORTzbXxHTiMGEW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import norm

pd.set_option('display.max_columns',None)
pd.set_option('display.max_rows',None)

data=pd.read_csv("/content/adult.csv")

data.shape

data.head()

pd.set_option('display.float_format', lambda x: '%.3f' % x)

data.describe()

data.info()

"""###Univariate Analysis
#####Analysing age
"""

data['age'].describe()

#Printing unique values and it's shape

print(data['age'].unique())
print('*'*75)
print(data['age'].unique().shape)
print('*'*75)
print(data['age'].value_counts())

plt.figure(figsize=(8,8))
sns.countplot(x=data['age'],order=data['age'].value_counts().iloc[:33].index,palette='rainbow')
plt.xticks(rotation=90)
plt.show()

#To find outliers in the data

def iqr(data):
    outliers=[]
    q1 = data.quantile(0.25)
    q3 = data.quantile(0.75)
    iqr = q3-q1
    Lower_tail = q1 - 1.5 * iqr
    Upper_tail = q3 + 1.5 * iqr
    print("Lower limit is: ",Lower_tail)
    print("Upper limit is: ",Upper_tail)
    for i in data:
        if i > Upper_tail or i < Lower_tail:
            outliers.append(i)
    return outliers

#Plotting the displot to see that the data is normally distributed or not

plt.figure(figsize=(8,8))
sns.displot(x=data['age'],kind='kde',palette='rainbow')

#plotting box plot to find outliers

plt.figure(figsize=(8,8))
sns.boxplot(y=data['age'],palette='rainbow')

# Finding outliers in the data

age_outliers=iqr(data['age'])
print(len(age_outliers))
print(age_outliers)
print(min(age_outliers))

# Removing outliers

data['age']=data[data['age']<79]

#Plotting box plot to see outliers

plt.figure(figsize=(8,8))
sns.boxplot(y=data['age'],palette='rainbow')

#Plotting countplot

plt.figure(figsize=(8,8))
sns.countplot(x=data['workclass'])
plt.xticks(rotation=45)
plt.show()

"""We can see most people are involved in the private sector i.e. 33906.
The are also missing value in the data '?'.
"""

data['workclass']=data['workclass'].replace('?',np.nan)

data['workclass'].value_counts()

"""Rather than having so-much unique values we can incoperate them under two or three unique values.


"""

data['workclass'].replace(['Private','Self-emp-not-inc','Local-gov',np.nan,'State-gov','Self-emp-inc','Federal-gov','Without-pay','Never-worked'],
                          ['Private','inc','gov',np.nan,'gov','inc','gov','Without-pay','Never-worked'],inplace=True)

data['workclass'].value_counts()

data['workclass'].isnull().sum()

mode=data['workclass'].mode()[0]

#Filling missing value with mode

data['workclass'].replace(np.nan,'Private',inplace=True)

data['workclass'].isnull().sum()

#Plotting countplot

plt.figure(figsize=(8,8))
sns.countplot(x=data['workclass'])
plt.xticks(rotation=45)
plt.show()

"""Now there are no missing values in the data.

###Analysing education
"""

data['education'].describe()

data['education'].value_counts()

# Plotting the countplot

plt.figure(figsize=(8,8))
sns.countplot(x=data['education'],palette='rainbow')
plt.xticks(rotation=60)
plt.show()

"""Most of the people have completed HS-grad and some bacholers.

On the other there are also peope working who have just completed their pre-school, 1st-8th and they have not completed any higher education, which is a matter of concern.
"""

plt.figure(figsize=(8,8))
sns.countplot(x=data['occupation'],palette='rainbow')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8,8))
sns.displot(x=data['capital-gain'],kind='kde')

plt.figure(figsize=(8,8))
stats.probplot(x=data['capital-gain'],dist='norm',plot=plt)
plt.grid()

plt.figure(figsize=(8,8))
sns.countplot(x=data['capital-gain'],order=data['capital-gain'].value_counts().iloc[:40].index,palette='rainbow')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8,8))
sns.countplot(x=data['capital-gain'],order=data['capital-gain'].value_counts().iloc[40:80].index,palette='rainbow')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8,8))
sns.countplot(x=data['capital-gain'],order=data['capital-gain'].value_counts().iloc[80:].index,palette='rainbow')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8,8))
sns.countplot(x=data['hours-per-week'],order=data['hours-per-week'].value_counts().iloc[:30].index)
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8,8))
sns.displot(x=data['hours-per-week'],kind='kde')

"""
The data is preety much symmetric.

There are some outliers present in the data"""

print("The skewness of the data is: ",data['hours-per-week'].skew())
print("The kurtosis of the data is: ",data['hours-per-week'].kurt())

# Plotting heatmap to find correlation

plt.figure(figsize=(8,8))
sns.heatmap(data.corr(),annot=True)

plt.figure(figsize=(8,8))
sns.histplot(x=data['hours-per-week'],hue=data['income'],palette='rainbow')