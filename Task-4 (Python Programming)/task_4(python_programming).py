# -*- coding: utf-8 -*-
"""Task-4(Python Programming).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M8UoC1yhwbP9-1vWSLZIT5Tkye67Keim
"""

#Ques-1 Swap Letter Cases

def swap_case(s):
    s=s.swapcase()
    return s

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)

#Ques-2 Split and Join Strings

def split_and_join(line):
    # write your code here
    line=line.split(" ")
    line="-".join(line)
    return line

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

#Ques-3 Printing full name with given first and last name

def print_full_name(first, last):
    # Write your code here
    print("Hello "+first+" "+last+"! You just delved into python.")

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)

#Ques-4 String mutations

def mutate_string(string, position, character):
    string=string[:position]+character+string[position+1:]
    return string

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)

#Ques-5 Finding a sub-string in given string

def count_substring(string, sub_string):
    count=0
    for i in range(len(string)-len(sub_string)+1):
        if string[i:len(sub_string)+i]==sub_string:
            count+=1           
    return count

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)

#Ques-6 String Validations

stringS = input()
print(any(x.isalnum() for x in stringS))
print(any(x.isalpha() for x in stringS))
print(any(x.isdigit() for x in stringS))
print(any(x.islower() for x in stringS))
print(any(x.isupper() for x in stringS))

#Ques-7 Text Alignment

#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

#Ques-8 Text Wrap

import textwrap

def wrap(string, max_width):
    string=textwrap.fill(string,max_width)
    return string

if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)

#Ques-9 Designer Door mat

N, M = map(int,input().split()) 
for i in range(1,N,2): 
    print((".|."*i).center(M,'-'))
print(("WELCOME".center(M,'-')))
for i in range(N-2,-1,-2): 
    print((".|."*i).center(M,'-'))

#Ques-10 String formatting

def print_formatted(number):
    # your code goes here
    l = len(bin(number)) - 2
    format_str = ' '.join(['%' + str(l) + 's'] * 4)
    for i in range(1, number + 1):
        print(format_str % (str(i), oct(i)[2:], hex(i)[2:].upper(), bin(i)[2:]))

if __name__ == '__main__':
    n = int(input())
    print_formatted(n)

#Ques-11 Alphabet Rangoli

def print_rangoli(size):
    # your code goes here
    r = []
    letters = [chr(ord('a') + x) for x in range(26)]
    hold = curr = size - 1
    for i in range(size):
        line = ''
        for j in range(2 * size - 1):
            if j % 2 == 1:
                line += '-'
            else:
                num = (2 * size - 2 - j) // 2 + curr
                if num <= hold:
                    line += letters[num]
                else:
                    line += '-'
        line = line + line[:-1][::-1]
        curr -= 1
        r.append(line)
    for i in range(n - 2, -1, -1):
        r.append(r[i][:])
    for i in r:
        print(i)

if __name__ == '__main__':
    n = int(input())
    print_rangoli(n)

#Ques-12  Capitalize

def solve(s):
    s=s.title()         
    return s

s = input()
result = solve(s)
print(result)

#Ques-13 The Minion Game

def minion_game(string):
    # your code goes here
    stuart=0
    kevin=0
    for i in range(len(string)):
        if string[i]=='A' or string[i]=='E' or string[i]=='I' or string[i]=='O' or string[i]=='U':
            kevin+=len(string)-i
        else:
            stuart+=len(string)-i
    if stuart==kevin:
     print("Draw")
    elif kevin>stuart:
     print("Kevin "+ str(kevin))
    else:
     print("Stuart "+ str(stuart))

if __name__ == '__main__':
    s = input()
    minion_game(s)

#Ques-14  Merge the tools

def merge_the_tools(string, k):
    # your code goes here
    i = 0
    while i < len(string):
      a = string[i:i+k]
      output = ""
      for x in a:
           if x not in output:
              output += x
      print(output)
      i += k
    
    
if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)