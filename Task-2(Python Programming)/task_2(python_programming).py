# -*- coding: utf-8 -*-
"""Task-2(Python Programming).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uc8hHdu5Div0j21peDkPb2x42SlETfbA
"""

#Ques-1 Four integers x,y and z, n each on a separate line. Print the list in lexicographic increasing order
x = int(input())
y = int(input())
z = int(input())
n = int(input())
perm=[]
for i in range(x+1):
    for j in range(y+1):
        for k in range(z+1):
             if i+j+k != n:
                perm.append([i,j,k])

print(perm)

#Ques-2 You are given n scores. Store them in a list and find the score of the runner-up.

if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    arr=list(arr)
    mx=arr[0]
    smx=arr[0]
    for i in arr:
        if(i>mx):
            mx=i
        if(i<smx):
            smx=i
   
mx2=smx
for i in arr:
    if(i>mx2 and i<mx):
        mx2=i
            
print(mx2)

#Ques-3 Given the names and grades for each student in a class of N students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.

n=int(input())
records=[]
for i in range(0,n):
    records.append([input(),float(input())])
records=sorted(records, key=lambda i:i[1])
for i in range(1,n):
    if(records[i][1]!=records[i-1][1]):
        score=records[i][1]
        break
records=sorted(records)
for i in range(n):
    if(records[i][1]==score):
        print(records[i][0])

#Ques-4 Print the average of the marks array for the student name provided, showing 2 places after the decimal.

student_records={}

for i in range(int(input())):
    student_name,sub1,sub2,sub3=input().split()
    student_records[student_name]=[float(sub1),float(sub2),float(sub3)]
query_name=input()
l=sum(student_records[query_name])
percentge=float(l/3)
print("%.2f" %percentge)

#Ques-5 Perform list commands

mylist = []
N = int(input())
for i in range(N):
    command = input().split()
    if command[0]=="sort":
        mylist.sort()
    elif command[0]=="print":
        print(mylist)
    elif command[0]=="reverse":
        mylist.reverse()
    elif command[0]=="pop":
        mylist.pop()
    elif command[0]=="insert":
        mylist.insert(int(command[1]),int(command[2]))
    elif command[0]=="append":
        mylist.append(int(command[1]))
    elif command[0]=="remove":
        mylist.remove(int(command[1]))

#Ques-6 Print the result of hash(tuple).

N = int(input())
print(hash(tuple(int(x) for x in input().split())))

#Ques-7 Set introduction

def average(array):
    # your code goes here
    setarray=set(array)
    res=sum(setarray)/len(setarray)
    return res

if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    result = average(arr)
    print(result)

#Ques-8 Happiness problem, 

n, m = map(int,input().split())
arr = map(int,input().split())
a = set(map(int,input().split()))
b = set(map(int,input().split()))

happiness = 0

for i in arr:
    if i in a:
        happiness += 1
        
    elif i in b:
        happiness -= 1
        
print(happiness)

#Ques-9 Computing Symmetric Difference

M=int(input())
setA=set(map(int,input().split()))
N=int(input())
setB=set(map(int,input().split()))
newset=(setA.difference(setB)).union(setB.difference(setA))
mylist=sorted(list(newset))
for x in mylist:
    print(x)

#Ques-10 Sets .add()

n=int(input())
stampset=set()
for i in range(n):
    stampset.add(input())
print(len(stampset))

#Ques-11 Set .discard(), .remove() & .pop()

n = int(input())
s = set(map(int, input().split()))
N=int(input())
for i in range(N):
    command = input().split()
    if command[0]=="pop":
        s.pop()
    elif command[0]=="discard":
        s.discard(int(command[1]))
    elif command[0]=="remove":
        s.remove(int(command[1]))
        
print(sum(s))

#Ques-12 Union operator

i = int(input())
engset = set(map(int, input().split()))
j=int(input())
frenchset=set(map(int, input().split()))    
subscribeset=engset.union(frenchset)
print(len(subscribeset))

#Ques-13 Intersection operator

i = int(input())
engset = set(map(int, input().split()))
j=int(input())
frenchset=set(map(int, input().split()))    
subscribeset=engset.intersection(frenchset)
print(len(subscribeset))

#Ques-14 Difference operator

i = int(input())
engset = set(map(int, input().split()))
j=int(input())
frenchset=set(map(int, input().split()))    
subscribeset=engset.difference(frenchset)
print(len(subscribeset))

#Ques-15 Symmetric Difference Operator

i = int(input())
engset = set(map(int, input().split()))
j=int(input())
frenchset=set(map(int, input().split()))    
subscribeset=engset.symmetric_difference(frenchset)
print(len(subscribeset))

#Ques-16 Set Mutations

a = int(input())
aset = set(map(int, input().split(' ')))
for i in range(int(input())):
    command, b = input().split(' ')
    if command == 'intersection_update':
        aset &= set(map(int, input().split(' ')))
    elif command == 'update':
        aset |= set(map(int, input().split(' ')))
    elif command == 'symmetric_difference_update':
        aset ^= set(map(int, input().split(' ')))
    else:
        aset -= set(map(int, input().split(' ')))
print(sum(aset))

#Ques-17  Captains Room

k = int(input())
rooms = (int(x) for x in input().split(' '))
seen = {}

for i in rooms:
    if not i in seen:
        seen[i] = 1
    else:
        seen[i] += 1

for key, val in seen.items():
    if val != k:
        print(key)

#Ques-18  check subset

for testcase in range(int(input())): 
    n = int(input()); setA = set(input().split()); 
    m = int(input()); setB = set(input().split());
    print(setA.issubset(setB))

#Ques-19 check superset

setA=set(map(int,input().split()))
flag=False
for i in range(int(input())):
    setn=set(map(int,input().split()))
    if(setA.issuperset(setn)):
        flag = True
    else: flag = False
    
print(flag)